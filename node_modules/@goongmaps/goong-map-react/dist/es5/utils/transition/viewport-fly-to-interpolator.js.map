{"version":3,"file":"viewport-fly-to-interpolator.js","names":["VIEWPORT_TRANSITION_PROPS","REQUIRED_PROPS","LINEARLY_INTERPOLATED_PROPS","DEFAULT_OPTS","speed","curve","ViewportFlyToInterpolator","props","Object","assign","startProps","endProps","startViewportProps","endViewportProps","key","startValue","endValue","assert","isValid","getEndValueByShortestPath","start","end","t","viewport","flyToViewport","lerp","transitionDuration","getFlyToDuration","TransitionInterpolator"],"sources":["../../../../src/utils/transition/viewport-fly-to-interpolator.js"],"sourcesContent":["import assert from '../assert';\nimport TransitionInterpolator from './transition-interpolator';\n\nimport {flyToViewport, getFlyToDuration} from 'viewport-mercator-project';\nimport {isValid, getEndValueByShortestPath} from './transition-utils';\nimport {lerp} from '../math-utils';\n\nconst VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\nconst REQUIRED_PROPS = ['latitude', 'longitude', 'zoom', 'width', 'height'];\nconst LINEARLY_INTERPOLATED_PROPS = ['bearing', 'pitch'];\nconst DEFAULT_OPTS = {\n  speed: 1.2,\n  curve: 1.414\n  // screenSpeed and maxDuration are used only if specified\n};\n\n/**\n * This class adapts mapbox-gl-js Map#flyTo animation so it can be used in\n * react/redux architecture.\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport default class ViewportFlyToInterpolator extends TransitionInterpolator {\n  propNames = VIEWPORT_TRANSITION_PROPS;\n\n  /**\n   * @param props {Object}\n   - `props.curve` (Number, optional, default: 1.414) - The zooming \"curve\" that will occur along the flight path.\n   - `props.speed` (Number, optional, default: 1.2) - The average speed of the animation defined in relation to `options.curve`, it linearly affects the duration, higher speed returns smaller durations and vice versa.\n   - `props.screenSpeed` (Number, optional) - The average speed of the animation measured in screenfuls per second. Similar to `opts.speed` it linearly affects the duration,  when specified `opts.speed` is ignored.\n   - `props.maxDuration` (Number, optional) - Maximum duration in milliseconds, if calculated duration exceeds this value, `0` is returned.\n   */\n  constructor(props = {}) {\n    super();\n\n    this.props = Object.assign({}, DEFAULT_OPTS, props);\n  }\n\n  initializeProps(startProps, endProps) {\n    const startViewportProps = {};\n    const endViewportProps = {};\n\n    // Check minimum required props\n    for (const key of REQUIRED_PROPS) {\n      const startValue = startProps[key];\n      const endValue = endProps[key];\n      assert(isValid(startValue) && isValid(endValue), `${key} must be supplied for transition`);\n      startViewportProps[key] = startValue;\n      endViewportProps[key] = getEndValueByShortestPath(key, startValue, endValue);\n    }\n\n    for (const key of LINEARLY_INTERPOLATED_PROPS) {\n      const startValue = startProps[key] || 0;\n      const endValue = endProps[key] || 0;\n      startViewportProps[key] = startValue;\n      endViewportProps[key] = getEndValueByShortestPath(key, startValue, endValue);\n    }\n\n    return {\n      start: startViewportProps,\n      end: endViewportProps\n    };\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const viewport = flyToViewport(startProps, endProps, t, this.props);\n\n    // Linearly interpolate 'bearing' and 'pitch' if exist.\n    for (const key of LINEARLY_INTERPOLATED_PROPS) {\n      viewport[key] = lerp(startProps[key], endProps[key], t);\n    }\n\n    return viewport;\n  }\n\n  // computes the transition duration\n  getDuration(startProps, endProps) {\n    let {transitionDuration} = endProps;\n    if (transitionDuration === 'auto') {\n      // auto calculate duration based on start and end props\n      transitionDuration = getFlyToDuration(startProps, endProps, this.props);\n    }\n    return transitionDuration;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAAmC;AAAA;AAEnC,IAAMA,yBAAyB,GAAG,CAAC,WAAW,EAAE,UAAU,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC;AACvF,IAAMC,cAAc,GAAG,CAAC,UAAU,EAAE,WAAW,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC;AAC3E,IAAMC,2BAA2B,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC;AACxD,IAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,GAAG;EACVC,KAAK,EAAE;AAET,CAAC;AAAC,IASmBC,yBAAyB;EAAA;EAAA;EAU5C,qCAAwB;IAAA;IAAA,IAAZC,KAAK,uEAAG,CAAC,CAAC;IAAA;IACpB;IAAQ,8FAVEP,yBAAyB;IAYnC,MAAKO,KAAK,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,YAAY,EAAEI,KAAK,CAAC;IAAC;EACtD;EAAC;IAAA;IAAA,OAED,yBAAgBG,UAAU,EAAEC,QAAQ,EAAE;MACpC,IAAMC,kBAAkB,GAAG,CAAC,CAAC;MAC7B,IAAMC,gBAAgB,GAAG,CAAC,CAAC;MAG3B,mCAAkBZ,cAAc,qCAAE;QAA7B,IAAMa,GAAG;QACZ,IAAMC,UAAU,GAAGL,UAAU,CAACI,GAAG,CAAC;QAClC,IAAME,QAAQ,GAAGL,QAAQ,CAACG,GAAG,CAAC;QAC9B,IAAAG,kBAAM,EAAC,IAAAC,wBAAO,EAACH,UAAU,CAAC,IAAI,IAAAG,wBAAO,EAACF,QAAQ,CAAC,YAAKF,GAAG,sCAAmC;QAC1FF,kBAAkB,CAACE,GAAG,CAAC,GAAGC,UAAU;QACpCF,gBAAgB,CAACC,GAAG,CAAC,GAAG,IAAAK,0CAAyB,EAACL,GAAG,EAAEC,UAAU,EAAEC,QAAQ,CAAC;MAC9E;MAEA,0CAAkBd,2BAA2B,6CAAE;QAA1C,IAAMY,IAAG;QACZ,IAAMC,WAAU,GAAGL,UAAU,CAACI,IAAG,CAAC,IAAI,CAAC;QACvC,IAAME,SAAQ,GAAGL,QAAQ,CAACG,IAAG,CAAC,IAAI,CAAC;QACnCF,kBAAkB,CAACE,IAAG,CAAC,GAAGC,WAAU;QACpCF,gBAAgB,CAACC,IAAG,CAAC,GAAG,IAAAK,0CAAyB,EAACL,IAAG,EAAEC,WAAU,EAAEC,SAAQ,CAAC;MAC9E;MAEA,OAAO;QACLI,KAAK,EAAER,kBAAkB;QACzBS,GAAG,EAAER;MACP,CAAC;IACH;EAAC;IAAA;IAAA,OAED,0BAAiBH,UAAU,EAAEC,QAAQ,EAAEW,CAAC,EAAE;MACxC,IAAMC,QAAQ,GAAG,IAAAC,sCAAa,EAACd,UAAU,EAAEC,QAAQ,EAAEW,CAAC,EAAE,IAAI,CAACf,KAAK,CAAC;MAGnE,2CAAkBL,2BAA2B,8CAAE;QAA1C,IAAMY,GAAG;QACZS,QAAQ,CAACT,GAAG,CAAC,GAAG,IAAAW,eAAI,EAACf,UAAU,CAACI,GAAG,CAAC,EAAEH,QAAQ,CAACG,GAAG,CAAC,EAAEQ,CAAC,CAAC;MACzD;MAEA,OAAOC,QAAQ;IACjB;EAAC;IAAA;IAAA,OAGD,qBAAYb,UAAU,EAAEC,QAAQ,EAAE;MAChC,IAAKe,kBAAkB,GAAIf,QAAQ,CAA9Be,kBAAkB;MACvB,IAAIA,kBAAkB,KAAK,MAAM,EAAE;QAEjCA,kBAAkB,GAAG,IAAAC,yCAAgB,EAACjB,UAAU,EAAEC,QAAQ,EAAE,IAAI,CAACJ,KAAK,CAAC;MACzE;MACA,OAAOmB,kBAAkB;IAC3B;EAAC;EAAA;AAAA,EA7DoDE,kCAAsB;AAAA"}