{"version":3,"file":"viewport-fly-to-interpolator.js","names":["assert","TransitionInterpolator","flyToViewport","getFlyToDuration","isValid","getEndValueByShortestPath","lerp","VIEWPORT_TRANSITION_PROPS","REQUIRED_PROPS","LINEARLY_INTERPOLATED_PROPS","DEFAULT_OPTS","speed","curve","ViewportFlyToInterpolator","constructor","props","Object","assign","initializeProps","startProps","endProps","startViewportProps","endViewportProps","key","startValue","endValue","start","end","interpolateProps","t","viewport","getDuration","transitionDuration"],"sources":["../../../../src/utils/transition/viewport-fly-to-interpolator.js"],"sourcesContent":["import assert from '../assert';\nimport TransitionInterpolator from './transition-interpolator';\n\nimport {flyToViewport, getFlyToDuration} from 'viewport-mercator-project';\nimport {isValid, getEndValueByShortestPath} from './transition-utils';\nimport {lerp} from '../math-utils';\n\nconst VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\nconst REQUIRED_PROPS = ['latitude', 'longitude', 'zoom', 'width', 'height'];\nconst LINEARLY_INTERPOLATED_PROPS = ['bearing', 'pitch'];\nconst DEFAULT_OPTS = {\n  speed: 1.2,\n  curve: 1.414\n  // screenSpeed and maxDuration are used only if specified\n};\n\n/**\n * This class adapts mapbox-gl-js Map#flyTo animation so it can be used in\n * react/redux architecture.\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport default class ViewportFlyToInterpolator extends TransitionInterpolator {\n  propNames = VIEWPORT_TRANSITION_PROPS;\n\n  /**\n   * @param props {Object}\n   - `props.curve` (Number, optional, default: 1.414) - The zooming \"curve\" that will occur along the flight path.\n   - `props.speed` (Number, optional, default: 1.2) - The average speed of the animation defined in relation to `options.curve`, it linearly affects the duration, higher speed returns smaller durations and vice versa.\n   - `props.screenSpeed` (Number, optional) - The average speed of the animation measured in screenfuls per second. Similar to `opts.speed` it linearly affects the duration,  when specified `opts.speed` is ignored.\n   - `props.maxDuration` (Number, optional) - Maximum duration in milliseconds, if calculated duration exceeds this value, `0` is returned.\n   */\n  constructor(props = {}) {\n    super();\n\n    this.props = Object.assign({}, DEFAULT_OPTS, props);\n  }\n\n  initializeProps(startProps, endProps) {\n    const startViewportProps = {};\n    const endViewportProps = {};\n\n    // Check minimum required props\n    for (const key of REQUIRED_PROPS) {\n      const startValue = startProps[key];\n      const endValue = endProps[key];\n      assert(isValid(startValue) && isValid(endValue), `${key} must be supplied for transition`);\n      startViewportProps[key] = startValue;\n      endViewportProps[key] = getEndValueByShortestPath(key, startValue, endValue);\n    }\n\n    for (const key of LINEARLY_INTERPOLATED_PROPS) {\n      const startValue = startProps[key] || 0;\n      const endValue = endProps[key] || 0;\n      startViewportProps[key] = startValue;\n      endViewportProps[key] = getEndValueByShortestPath(key, startValue, endValue);\n    }\n\n    return {\n      start: startViewportProps,\n      end: endViewportProps\n    };\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const viewport = flyToViewport(startProps, endProps, t, this.props);\n\n    // Linearly interpolate 'bearing' and 'pitch' if exist.\n    for (const key of LINEARLY_INTERPOLATED_PROPS) {\n      viewport[key] = lerp(startProps[key], endProps[key], t);\n    }\n\n    return viewport;\n  }\n\n  // computes the transition duration\n  getDuration(startProps, endProps) {\n    let {transitionDuration} = endProps;\n    if (transitionDuration === 'auto') {\n      // auto calculate duration based on start and end props\n      transitionDuration = getFlyToDuration(startProps, endProps, this.props);\n    }\n    return transitionDuration;\n  }\n}\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,WAAW;AAC9B,OAAOC,sBAAsB,MAAM,2BAA2B;AAE9D,SAAQC,aAAa,EAAEC,gBAAgB,QAAO,2BAA2B;AACzE,SAAQC,OAAO,EAAEC,yBAAyB,QAAO,oBAAoB;AACrE,SAAQC,IAAI,QAAO,eAAe;AAElC,MAAMC,yBAAyB,GAAG,CAAC,WAAW,EAAE,UAAU,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC;AACvF,MAAMC,cAAc,GAAG,CAAC,UAAU,EAAE,WAAW,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC;AAC3E,MAAMC,2BAA2B,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC;AACxD,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,GAAG;EACVC,KAAK,EAAE;AAET,CAAC;AASD,eAAe,MAAMC,yBAAyB,SAASZ,sBAAsB,CAAC;EAU5Ea,WAAW,GAAa;IAAA,IAAZC,KAAK,uEAAG,CAAC,CAAC;IACpB,KAAK,EAAE;IAAC,mCAVER,yBAAyB;IAYnC,IAAI,CAACQ,KAAK,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEP,YAAY,EAAEK,KAAK,CAAC;EACrD;EAEAG,eAAe,CAACC,UAAU,EAAEC,QAAQ,EAAE;IACpC,MAAMC,kBAAkB,GAAG,CAAC,CAAC;IAC7B,MAAMC,gBAAgB,GAAG,CAAC,CAAC;IAG3B,KAAK,MAAMC,GAAG,IAAIf,cAAc,EAAE;MAChC,MAAMgB,UAAU,GAAGL,UAAU,CAACI,GAAG,CAAC;MAClC,MAAME,QAAQ,GAAGL,QAAQ,CAACG,GAAG,CAAC;MAC9BvB,MAAM,CAACI,OAAO,CAACoB,UAAU,CAAC,IAAIpB,OAAO,CAACqB,QAAQ,CAAC,YAAKF,GAAG,sCAAmC;MAC1FF,kBAAkB,CAACE,GAAG,CAAC,GAAGC,UAAU;MACpCF,gBAAgB,CAACC,GAAG,CAAC,GAAGlB,yBAAyB,CAACkB,GAAG,EAAEC,UAAU,EAAEC,QAAQ,CAAC;IAC9E;IAEA,KAAK,MAAMF,GAAG,IAAId,2BAA2B,EAAE;MAC7C,MAAMe,UAAU,GAAGL,UAAU,CAACI,GAAG,CAAC,IAAI,CAAC;MACvC,MAAME,QAAQ,GAAGL,QAAQ,CAACG,GAAG,CAAC,IAAI,CAAC;MACnCF,kBAAkB,CAACE,GAAG,CAAC,GAAGC,UAAU;MACpCF,gBAAgB,CAACC,GAAG,CAAC,GAAGlB,yBAAyB,CAACkB,GAAG,EAAEC,UAAU,EAAEC,QAAQ,CAAC;IAC9E;IAEA,OAAO;MACLC,KAAK,EAAEL,kBAAkB;MACzBM,GAAG,EAAEL;IACP,CAAC;EACH;EAEAM,gBAAgB,CAACT,UAAU,EAAEC,QAAQ,EAAES,CAAC,EAAE;IACxC,MAAMC,QAAQ,GAAG5B,aAAa,CAACiB,UAAU,EAAEC,QAAQ,EAAES,CAAC,EAAE,IAAI,CAACd,KAAK,CAAC;IAGnE,KAAK,MAAMQ,GAAG,IAAId,2BAA2B,EAAE;MAC7CqB,QAAQ,CAACP,GAAG,CAAC,GAAGjB,IAAI,CAACa,UAAU,CAACI,GAAG,CAAC,EAAEH,QAAQ,CAACG,GAAG,CAAC,EAAEM,CAAC,CAAC;IACzD;IAEA,OAAOC,QAAQ;EACjB;EAGAC,WAAW,CAACZ,UAAU,EAAEC,QAAQ,EAAE;IAChC,IAAI;MAACY;IAAkB,CAAC,GAAGZ,QAAQ;IACnC,IAAIY,kBAAkB,KAAK,MAAM,EAAE;MAEjCA,kBAAkB,GAAG7B,gBAAgB,CAACgB,UAAU,EAAEC,QAAQ,EAAE,IAAI,CAACL,KAAK,CAAC;IACzE;IACA,OAAOiB,kBAAkB;EAC3B;AACF"}